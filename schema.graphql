# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthenticatorAssertionResponseDTO {
  """base64 encoded AuthenticatorAttestationResponse.authenticatorData"""
  authenticatorData: String!

  """base64 encoded AuthenticatorAttestationResponse.clientDataJSON"""
  clientDataJSON: String!

  """base64 encoded AuthenticatorAttestationResponse.signature"""
  signature: String!
}

input AuthenticatorAttestationResponseDTO {
  """base64 encoded AuthenticatorAttestationResponse.authenticatorData"""
  authenticatorData: String!

  """base64 encoded AuthenticatorAttestationResponse.clientDataJSON"""
  clientDataJSON: String!

  """base64 encoded AuthenticatorAttestationResponse.getPublicKey"""
  publicKey: String!

  """
  The public key algorithm of the credential in COSEAlgorithmIdentifier format, usually a negative number. This server only supports -7 (ES256) and -257 (RS256).
  """
  publicKeyAlgorithm: Float!
}

type DealDTO {
  dealPrice: Float!
  dealQuantity: Int!
  id: String!
  product: ProductDTO!
  requiresCard: Boolean!
}

type DealPaginatedType {
  items: [DealDTO!]!
  meta: PaginationMeta!
}

enum DealSortChoices {
  DEAL_PRICE
  PRODUCT_NAME
  PRODUCT_PRICE
  SAVINGS
  SAVINGS_PERCENTAGE
}

type ExtendedProductDTO {
  dealHistory: [ProductDealHistoryDTO!]!
  id: String!
  imageUrl: String!
  name: String!
  price: Float!
  priceHistory: [ProductPriceHistoryDTO!]!
  productUrl: String!
  shop: ShopDTO!
}

type JwtPayload {
  exp: Int!
  iat: Int!
  roles: [Roles!]!
  sub: String!
  username: String!
}

type MeDTO {
  roles: [Roles!]!
  sub: String!
  username: String!
}

type Mutation {
  addUserCredential(
    """ID of the credential, this should be created by the authenticator"""
    id: String!
    response: AuthenticatorAttestationResponseDTO!
    user: UserDTO!
  ): Boolean!

  """base64 encoded random string"""
  createChallenge: String!
  loginUser(
    """ID of the credential, this should be created by the authenticator"""
    id: String!
    response: AuthenticatorAssertionResponseDTO!
  ): Boolean!
  logoutUser: Boolean!
  registerUser(
    """ID of the credential, this should be created by the authenticator"""
    id: String!
    response: AuthenticatorAttestationResponseDTO!
    user: UserDTO!
  ): Boolean!
  resolveUnknownDeal(id: ID!): Boolean!
  startScraper(name: String!): Boolean!
  startTask(name: String!): Boolean!
}

enum Order {
  ASCENDING
  DESCENDING
}

type PaginationMeta {
  currentPage: Int!
  itemCount: Int!
  itemsPerPage: Int!
  totalItems: Int
  totalPages: Int
}

type ProductDTO {
  id: String!
  imageUrl: String!
  name: String!
  price: Float!
  productUrl: String!
  shop: ShopDTO!
}

type ProductDealHistoryDTO {
  createdOn: String!
  dealPrice: Float!
  dealQuantity: Float!
  deletedOn: String
}

type ProductPaginatedType {
  items: [ProductDTO!]!
  meta: PaginationMeta!
}

type ProductPriceHistoryDTO {
  createdOn: String!
  price: Float!
}

enum ProductSortChoices {
  PRODUCT_NAME
  PRODUCT_PRICE
}

type Query {
  check(challenge: String!): Boolean!
  deal(id: ID!): DealDTO
  deals(limit: Int = 10, order: Order = ASCENDING, page: Int = 1, query: String, shop: String, sort: [DealSortChoices!] = [PRODUCT_NAME]): DealPaginatedType!
  me: MeDTO
  product(id: ID!): ExtendedProductDTO
  products(limit: Int = 10, order: Order = ASCENDING, page: Int = 1, query: String, shop: String, sort: [ProductSortChoices!] = [PRODUCT_NAME]): ProductPaginatedType!
  service(id: ID!): ServiceHealthDTO
  services: [ServiceHealthDTO!]!
  shops: [ShopDTO!]!
  task(name: String!): TaskDTO
  tasks: [TaskDTO!]!
  unknownDeals: [UnknownDealDTO!]!
  verify(token: String!): JwtPayload!
}

enum Roles {
  ADMIN
}

type ServiceHealthDTO {
  id: ID!
  name: String!
  queue: String!
  status: StatusDTO!
  type: ServiceType!
}

enum ServiceType {
  CORE
  SCRAPER
}

type ShopDTO {
  id: ID!
  name: String!
}

type StatusDTO {
  status: String!
  uptime: Float
}

type TaskDTO {
  lastRun: String
  name: String!
  nextRun: String!
}

type UnknownDealDTO {
  deal: String!
  id: ID!
  productUrl: String!
  shop: ShopDTO!
  updatedOn: String!
}

input UserDTO {
  """Name of the user"""
  name: String!
}