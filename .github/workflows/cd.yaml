name: Deals CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  audit:
    name: Audit dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm audit --omit=dev

  get_sha:
    name: Get short SHA for image tags
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.get_sha.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - id: get_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  determine_buildable:
    name: Determine buildable apps
    runs-on: ubuntu-latest
    outputs:
      buildable: ${{ steps.determine_buildable.outputs.buildable }}
    steps:
        - uses: actions/checkout@v4
        - uses: oven-sh/setup-bun@v1
        - run: bun install
        - id: determine_buildable
          run: echo "buildable=$(bun run determine-buildable)" >> $GITHUB_OUTPUT

  determine_testable:
    name: Determine testable apps
    runs-on: ubuntu-latest
    outputs:
      testable: ${{ steps.determine_testable.outputs.testable }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - run: bun install
      - id: determine_testable
        run: echo "testable=$(bun run determine-testable)" >> $GITHUB_OUTPUT

  lint:
    name: Static code analysis
    needs: audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - run: bun install
      - run: bun run lint

  test:
    name: Unit tests
    needs: [audit, determine_testable]
    strategy:
      matrix:
#        app: ${{fromJson(needs.determine_testable.outputs.testable).replaceAll('/', '-')}}
        app: [auth]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - run: npm ci
      - run: bun run test ${{matrix.app}}

  build-image:
    name: Build image
    needs: [lint, test, determine_buildable]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{fromJson(needs.determine_buildable.outputs.buildable).replaceAll('/', '-')}}

    steps:
      - uses: actions/checkout@v4
      - run: docker compose build ${{matrix.app}}
      - run: docker save -o ${{matrix.app}}-image.tar docker.saturnserver.org/deals/${{matrix.app}}:latest
      - uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.app}}-image
          path: ${{matrix.app}}-image.tar
          retention-days: 1

  e2e:
    name: E2E tests
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - run: for f in */*.tar; do docker load -i $f; done
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - run: docker compose --file apps/client-e2e/compose.yaml up --wait -d
      - run: docker compose pull nats
      - run: docker compose up --pull=never --no-build --wait -d
        env:
          STORAGE_DB_HOST: mysql
          STORAGE_DB_PORT: 3306
          STORAGE_DB_USER: e2e
          STORAGE_DB_PASS: DontTellAnyoneThisPassword
          STORAGE_DB_SSL: false
          STORAGE_DB_NAME: deals_e2e
          STORAGE_DB_SYNCHRONIZE: true
          GATEWAY_SESSION_NAME: DealE2ESession
          GATEWAY_SESSION_SECRET: DontTellAnyoneThisSecret
          DEALS_CLIENT_PORT: 4200
          AUTH_DB_URL: "mongodb://e2e:DontTellAnyoneThisPassword@mongo"
      - run: npm ci
      - run: npx nx run client-e2e:e2e
      - run: docker compose ps -a
      - run: docker compose logs

  push-image:
    name: Push image
    needs: [e2e, get_sha, determine_buildable]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{fromJson(needs.determine_buildable.outputs.buildable).replaceAll('/', '-')}}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{matrix.app}}-image
      - run: docker load -i ${{matrix.app}}-image.tar
      - run: docker tag docker.saturnserver.org/deals/${{matrix.app}}:latest docker.saturnserver.org/deals/${{matrix.app}}:${{needs.get_sha.outputs.sha_short}}
      - uses: docker/login-action@v3
        with:
          registry: docker.saturnserver.org
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: docker push -a docker.saturnserver.org/deals/${{matrix.app}}
